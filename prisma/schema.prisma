// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

enum UserRole {
  STUDENT
  EMPLOYER
  ADMIN
}

enum ApplicationStatus {
  PENDING
  SHORTLISTED
  REJECTED
  ACCEPTED
  COMPLETED
}

enum InternshipType {
  FULL_TIME
  PART_TIME
  REMOTE
  HYBRID
}

enum Sector {
  TECHNOLOGY
  HEALTHCARE
  EDUCATION
  AGRICULTURE
  MANUFACTURING
  RETAIL
  FINANCE
  GOVERNMENT
  OTHER
}

model User {
  id           String   @id @default(cuid())
  email        String?  @unique
  mobileNumber String   @unique
  password     String
  name         String?
  role         UserRole
  isActive     Boolean  @default(true)
  isVerified   Boolean  @default(false)
  lastLogin    DateTime?
  otp          String?
  otpExpires   DateTime?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  // Relations
  studentProfile  Student?
  employerProfile Employer?
  notifications   Notification[]
  
  @@map("users")
}

model Student {
  id          String @id @default(cuid())
  userId      String @unique
  aadhaar     String? @unique
  phone       String?
  address     String?
  state       String?
  district    String?
  language    String? @default("english")
  resumeUrl   String?
  bio         String?
  experience  Int?    // years of experience
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  education    Education[]
  skills       StudentSkill[]
  applications Application[]
  preferences  StudentPreference[]
  recommendations AIRecommendation[]
  
  @@map("students")
}

model Employer {
  id          String @id @default(cuid())
  userId      String @unique
  companyName String
  gstin       String? @unique
  pan         String?
  phone       String?
  address     String?
  state       String?
  district    String?
  sector      Sector
  description String?
  website     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  internships  Internship[]
  
  @@map("employers")
}

model Education {
  id          String @id @default(cuid())
  studentId   String
  institution String
  degree      String
  field       String
  startYear   Int
  endYear     Int?
  grade       String?
  createdAt   DateTime @default(now())
  
  // Relations
  student Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
  
  @@map("education")
}

model Skill {
  id          String @id @default(cuid())
  name        String @unique
  category    String?
  createdAt   DateTime @default(now())
  
  // Relations
  studentSkills StudentSkill[]
  internshipSkills InternshipSkill[]
  
  @@map("skills")
}

model StudentSkill {
  id        String @id @default(cuid())
  studentId String
  skillId   String
  level     Int? // 1-5 proficiency level
  createdAt DateTime @default(now())
  
  // Relations
  student Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
  skill   Skill   @relation(fields: [skillId], references: [id], onDelete: Cascade)
  
  @@unique([studentId, skillId])
  @@map("student_skills")
}

model Internship {
  id            String          @id @default(cuid())
  employerId    String
  title         String
  description   String
  type          InternshipType
  sector        Sector
  location      String
  state         String
  district      String?
  stipend       Float?
  duration      Int // in weeks
  positions     Int
  requirements  String?
  skills        String? // JSON array of skill names
  responsibilities String?
  benefits      String?
  isActive      Boolean         @default(true)
  isVerified    Boolean         @default(false)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  deadline      DateTime?        // application deadline
  
  // Relations
  employer    Employer       @relation(fields: [employerId], references: [id], onDelete: Cascade)
  applications Application[]
  internshipSkills InternshipSkill[]
  recommendations AIRecommendation[]
  
  @@map("internships")
}

model InternshipSkill {
  id           String @id @default(cuid())
  internshipId String
  skillId      String
  importance   Int? // 1-5 importance level
  createdAt    DateTime @default(now())
  
  // Relations
  internship Internship @relation(fields: [internshipId], references: [id], onDelete: Cascade)
  skill       Skill       @relation(fields: [skillId], references: [id], onDelete: Cascade)
  
  @@unique([internshipId, skillId])
  @@map("internship_skills")
}

model Application {
  id             String           @id @default(cuid())
  studentId      String
  internshipId   String
  status         ApplicationStatus @default(PENDING)
  matchScore     Float? // AI recommendation score
  appliedAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  
  // Relations
  student    Student    @relation(fields: [studentId], references: [id], onDelete: Cascade)
  internship Internship @relation(fields: [internshipId], references: [id], onDelete: Cascade)
  
  @@unique([studentId, internshipId])
  @@map("applications")
}

model StudentPreference {
  id           String @id @default(cuid())
  studentId    String
  preferredSectors String? // JSON array
  preferredLocations String? // JSON array
  preferredTypes String? // JSON array of InternshipType
  minStipend   Float?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  // Relations
  student Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
  
  @@map("student_preferences")
}

model Analytics {
  id            String   @id @default(cuid())
  date          DateTime @default(now())
  state         String?
  district      String?
  sector        Sector?
  totalStudents Int      @default(0)
  totalEmployers Int     @default(0)
  totalInternships Int  @default(0)
  totalApplications Int @default(0)
  acceptedApplications Int @default(0)
  completedInternships Int @default(0)
  
  @@map("analytics")
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  title     String
  message   String
  type      String   @default("INFO") // INFO, SUCCESS, WARNING, ERROR
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  
  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("notifications")
}

model AIRecommendation {
  id             String   @id @default(cuid())
  studentId      String
  internshipId   String
  score          Float
  reasons        String?  // JSON array of reasons
  createdAt      DateTime @default(now())
  
  // Relations
  student    Student    @relation(fields: [studentId], references: [id], onDelete: Cascade)
  internship Internship @relation(fields: [internshipId], references: [id], onDelete: Cascade)
  
  @@unique([studentId, internshipId])
  @@map("ai_recommendations")
}